# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18uKIsc-waCVH79SD8BN2I1EzLRFCnAJS
"""
#CNN
import pandas as pd
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
import seaborn as sns
import matplotlib.pyplot as plt


eval_path = r"D:\谷歌下载\thesis_doc\eval_result.csv"
label_path = r"D:\谷歌下载\thesis_doc\test_labels.csv"


eval_df = pd.read_csv(eval_path)
label_df = pd.read_csv(label_path)
label_df = label_df[label_df['split'] == 'test'].reset_index(drop=True)

soft_label_cols = label_df.columns[2:-1]  
pred_label_cols = ['pred_' + c for c in soft_label_cols]  


eval_df = eval_df.sort_values(by='image_name').reset_index(drop=True)
label_df = label_df.sort_values(by='image_name').reset_index(drop=True)


y_true = label_df[soft_label_cols].values
y_pred = eval_df[pred_label_cols].values


mse_per_class = ((y_true - y_pred) ** 2).mean(axis=0)
mae_per_class = np.abs(y_true - y_pred).mean(axis=0)
cosine_sim_per_sample = [cosine_similarity(y_true[i:i+1], y_pred[i:i+1])[0][0] for i in range(len(y_true))]


metric_df = pd.DataFrame({
    'Category': soft_label_cols,
    'MSE': mse_per_class,
    'MAE': mae_per_class
}).sort_values(by='MSE', ascending=False)

plt.figure(figsize=(10, 6))
sns.barplot(x='MSE', y='Category', data=metric_df, color='orange')
plt.title("Per-category MSE (eval_result vs true soft labels)")
plt.tight_layout()
plt.show()


mean_cosine = np.mean(cosine_sim_per_sample)
print(f"\nAverage cosine similarity across test set: {mean_cosine:.4f}")


#KNN 


import pandas as pd
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
import seaborn as sns
import matplotlib.pyplot as plt


eval_path = r"D:\谷歌下载\thesis_doc\test_knn_predictions.csv"
label_path = r"D:\谷歌下载\thesis_doc\test_labels.csv"


eval_df = pd.read_csv(eval_path)
label_df = pd.read_csv(label_path)
label_df = label_df[label_df['split'] == 'test'].reset_index(drop=True)

soft_label_cols = label_df.columns[2:-1]  
pred_label_cols = ['pred_' + c for c in soft_label_cols]  


eval_df = eval_df.sort_values(by='image_name').reset_index(drop=True)
label_df = label_df.sort_values(by='image_name').reset_index(drop=True)


y_true = label_df[soft_label_cols].values
y_pred = eval_df[pred_label_cols].values


mse_per_class = ((y_true - y_pred) ** 2).mean(axis=0)
mae_per_class = np.abs(y_true - y_pred).mean(axis=0)
cosine_sim_per_sample = [cosine_similarity(y_true[i:i+1], y_pred[i:i+1])[0][0] for i in range(len(y_true))]


metric_df = pd.DataFrame({
    'Category': soft_label_cols,
    'MSE': mse_per_class,
    'MAE': mae_per_class
}).sort_values(by='MSE', ascending=False)

plt.figure(figsize=(10, 6))
sns.barplot(x='MSE', y='Category', data=metric_df, color='orange')
plt.title("Per-category MSE (eval_result vs true soft labels)")
plt.tight_layout()
plt.show()


mean_cosine = np.mean(cosine_sim_per_sample)
print(f"\nAverage cosine similarity across test set: {mean_cosine:.4f}")




#combined pic

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np


knn_path = 'D:/谷歌下载/thesis_doc/saved_models/per_category_mse_mae.csv'
knn_df = pd.read_csv(knn_path)


knn_df = knn_df.rename(columns={'MSE': 'MSE_KNN'})


cnn_df = metric_df.rename(columns={'MSE': 'MSE_CNN'})

merged_df = pd.merge(knn_df[['Category', 'MSE_KNN']], cnn_df[['Category', 'MSE_CNN']], on='Category')


merged_df['MSE_Diff'] = (merged_df['MSE_KNN'] - merged_df['MSE_CNN']).abs()
merged_df = merged_df.sort_values(by='MSE_Diff', ascending=False)

plt.figure(figsize=(12, 10))
bar_width = 0.4
index = np.arange(len(merged_df))

plt.barh(index, merged_df['MSE_KNN'], bar_width, label='KNN', color='skyblue')
plt.barh(index + bar_width, merged_df['MSE_CNN'], bar_width, label='CNN', color='orange')

plt.yticks(index + bar_width / 2, merged_df['Category'])
plt.xlabel('MSE')
plt.title('Per-Category MSE Comparison (KNN vs CNN)')
plt.legend()
plt.gca().invert_yaxis()
plt.tight_layout()
plt.show()